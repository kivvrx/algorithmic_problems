// перебирать прийдется все иначе будет неоптимально
// 1 в массиве dp будем хранить для каждого индекса минимальное число купюр которые 
// нужно для суммы i тоесть dp[i] = числу i-это сумма она может быть найдена а может и не быть
// в зависимости от того какие номиналы у нас в наличии найдена это значит значение элемента этого массива
// равно числу минимальному количеству купюр 
// 2 базовый случай у нас когда сумма равна 0 значит и купюр надо 0 значит базовый случай dp[0] = 0
// 3 у нас есть dp[0] следующая сумма 1 => это увеличение задачи и так что сделать чтобы посчитать dp[1] 
// нужно выбрать одну из купюр 
// возьмем пример у нас есть 3 номинала 1 2 3 
// у нас задача найти например минимальное количество монет дающих сумму 5 
// тоесть найти dp[5] = (dp[5-1]+1) или (dp[5-2]+1) или (dp[5-3]+1) нужно найти минимум из этих вариантов
// посмотрим dp[1] = 1, dp[2] = 1, dp[3] = 1, dp[4] = 2 значит формула dp[s-c]+1 как бы говорит давайте 
// возьмем какую то купюру из доступных предположим что она нам нужна отнимем от общей суммы и прибавим
// к ответу d[какой то i] единицу потому что мы же уже взяли какую то купюру а те значения что левее i уже 
// должны быть вычислены значит формула перехода от большей задачи к меньшей 
// dp[i] = min(dp[s-c_k]+1) и так k раз сколько у нас доступно купюр
// 4 идем вперед потому что иначе нельзя вычислить следующий элемент
// 5 dp[s] это и есть ответ если у нас спрашивается сумма s  

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <climits>

int main() {
    int x, k;
    std::cin >> x >> k;
    std::set<int> s_k;
    for (int i = 0; i < k; ++i) {
        int kk;
        std::cin >> kk;
        s_k.insert(kk);  // сохраняем уникальные номиналы
    }

    std::vector<int> dp(x + 1, INT_MAX);  // инициализируем как "бесконечность"
    dp[0] = 0;  // базовый случай

    for (int i = 1; i <= x; ++i) {
        for (int coin : s_k) {
            if (i >= coin && dp[i - coin] != INT_MAX) {
                dp[i] = std::min(dp[i], dp[i - coin] + 1);
            }
        }
    }

    if (dp[x] == INT_MAX)
        std::cout << -1 << std::endl;
    else
        std::cout << dp[x] << std::endl;

    return 0;
}
